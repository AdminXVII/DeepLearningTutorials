.. _cnn_1D_segm:

Network for 1D segmentation
***************************

.. note::
    This section assumes the reader has already read through :doc:`fcn_2D_segm`.


Summary
+++++++

The fundamental notions behind segmentation have been explained in :doc:`fcn_2D_segm`.
A particularity here is that some of these notions will be applied to 1D
segmentation. However, almost every Lasagne layer used for 2D segmentation have
their respective 1D layer, so the implementation would look alike if the same
model was used.




Data
++++

The `BigBrain <https://bigbrain.loris.ca/main.php>`__ dataset is composed of
sections of the brain.
We are interested in the outer part of the brain, the cortex.
More precisely, we are interested in segmenting the 6 different layers of the cortex.
To do so, instead of giving as input a 2D image of one section of the brain (including the cortex)
as in Figure 1, we give as input 1D vectors with information from across the cortex of the brain,
as shown in Figure 2. The actual dataset can be found `here TODO: link the dataset`.

.. figure:: images/big_brain_section.png
    :align: center
    :scale: 100%

    **Figure 1** : Big Brain section

.. figure:: images/ray.png
    :align: center
    :scale: 50%

    **Figure 2** : Ray extraction from segmentated cortex

We will call *rays* the vectors of size 200 going from outside the brain and
through the cortex. Each pixel of these rays represent the cell densities
and sizes contained in the cortical layer to which the pixel belongs. Since the 6 cortical layers
have different properties (cell density and size), the intensity profile can be used to
detect boudaries of the cortical layers.

Each ray has 2 input channels, one representing the smoothed intensity and the other,
the raw version, as shown in Figure 3. The next figure, Figure 4, shows the
ground truth segmentation map, where each different color represent
a different label. The purple color indicate that these pixels are
outside the cortex, while the 6 other colors represent the 6 cortical layers.
For exemple, the first layer of the cortex is between pixels ~ 35-55. The cortex
for this sample starts at pixel ~25 and ends at pixel ~170.


.. figure:: images/raw_smooth.png
    :align: center
    :scale: 100%

    **Figure 3** : Raw and smooth intensity profiles (input channels)


.. figure:: images/labels.png
    :align: center
    :scale: 100%

    **Figure 4** : Cortical layers labels for this ray



Model
+++++

We first started our experiment with more complex models, but we finally found that
the model we will present had enough capacity to learn how and where the layer boundaries are.
This model (depicted in Figure 5) is composed of 8 identical blocks, followed by a
last convolution and a softmax non linearity.

Each block is composed of :

* Batch Normalization layer
* Rectify nonlinearity layer
* Convolution layer, with kernel size 25, with enough padding such that the convolution does not change the feature resolution, and 64 features maps

The last convolution has kernel size 1 and *number of classes* feature maps.
The softmax is then
used to detect which of these classes is more likely for each pixel.
Note that any input image size could be used here, since the model is built from
locally connected layers exclusively.

.. figure:: images/cortical_layers_net.png
    :align: center
    :scale: 100%

    **Figure 5** : Model

Note that we didn't use any pooling, because it was not needed. However, if
pooling layers were used, an upsampling path would have been necessary to recover full
spatial size of the input ray. Also, since each pixel of the output prediction has
a receptive field that includes all of the input pixel, the network is able to extract
enough contextual information.







Results
+++++++

The model outputs a vector of the same size as the input (here, 200).
There are 7 class labels, including the 6 cortical layers and the 'not in the brain yet'
label. You can see in Figure 6 below the output of the model for some ray. The top
of the plot represent the ground truth segmentation, while the bottoms represent
the predicted segmentation. As you can see, there is only a small number of pixels
not correctly segmented.

.. figure:: images/cortical_ray_result.png
    :align: center
    :scale: 100%

    **Figure 6** : Ground truth (top) vs prediction (bottom) for 1 ray

However, since the purpose was to do 2D segmentation by using 1D segmentation
of the rays, we needed to put back the rays on the brain section. After interpolation
between those rays and smoothing, we get the results shown in Figure 7. The colored
lines are the prediction from the model and the grayscale stripes correspond to the
ground truth. As you can see, it achieves really good results on that
sample.



.. figure:: images/cortical_valid1.png
    :align: center
    :scale: 40%

    **Figure 7** : Results put on the brain section

View other `result <_images/cortical_valid2.png>`_

Code - Citations - Contact
++++++++++++++++++++++++++

Code
====

The FCN implementation can be found in the following file:

* `file.py <../code/file.py>`_ : Main script. Defines the model.




Papers
======

If you use this tutorial, please cite the following papers.

Fully Convolutional Networks for Semantic Segmentation

* `[pdf] <https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf>`__ reference

Papers related to Theano:

* `[pdf] <http://www.iro.umontreal.ca/~lisa/pointeurs/nips2012_deep_workshop_theano_final.pdf>`__ Bastien, Frédéric, Lamblin, Pascal, Pascanu, Razvan, Bergstra, James, Goodfellow, Ian, Bergeron, Arnaud, Bouchard, Nicolas, and Bengio, Yoshua. Theano: new features and speed improvements. NIPS Workshop on Deep Learning and Unsupervised Feature Learning, 2012.

* `[pdf] <http://www.iro.umontreal.ca/~lisa/pointeurs/theano_scipy2010.pdf>`__ Bergstra, James, Breuleux, Olivier, Bastien, Frédéric, Lamblin, Pascal, Pascanu, Razvan, Desjardins, Guillaume, Turian, Joseph, Warde-Farley, David, and Bengio, Yoshua. Theano: a CPU and GPU math expression compiler. In Proceedings of the Python for Scientific Computing Conference (SciPy), June 2010.

Thank you!

Contact
=======

Please email

References
++++++++++

* ref1

* ref2
